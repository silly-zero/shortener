// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	clickStatisticsFieldNames          = builder.RawFieldNames(&ClickStatistics{})
	clickStatisticsRows                = strings.Join(clickStatisticsFieldNames, ",")
	clickStatisticsRowsExpectAutoSet   = strings.Join(stringx.Remove(clickStatisticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	clickStatisticsRowsWithPlaceHolder = strings.Join(stringx.Remove(clickStatisticsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheShortenerClickStatisticsIdPrefix = "cache:shortener:clickStatistics:id:"
)

type (
	clickStatisticsModel interface {
		Insert(ctx context.Context, data *ClickStatistics) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ClickStatistics, error)
		Update(ctx context.Context, data *ClickStatistics) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultClickStatisticsModel struct {
		sqlc.CachedConn
		table string
	}

	ClickStatistics struct {
		Id        uint64         `db:"id"`
		Surl      string         `db:"surl"`       // 短链接标识
		ClickTime time.Time      `db:"click_time"` // 点击时间
		Ip        sql.NullString `db:"ip"`         // 访问IP
		UserAgent sql.NullString `db:"user_agent"` // 用户代理
		Referer   sql.NullString `db:"referer"`    // 来源页面
	}
)

func newClickStatisticsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultClickStatisticsModel {
	return &defaultClickStatisticsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`click_statistics`",
	}
}

func (m *defaultClickStatisticsModel) Delete(ctx context.Context, id uint64) error {
	shortenerClickStatisticsIdKey := fmt.Sprintf("%s%v", cacheShortenerClickStatisticsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, shortenerClickStatisticsIdKey)
	return err
}

func (m *defaultClickStatisticsModel) FindOne(ctx context.Context, id uint64) (*ClickStatistics, error) {
	shortenerClickStatisticsIdKey := fmt.Sprintf("%s%v", cacheShortenerClickStatisticsIdPrefix, id)
	var resp ClickStatistics
	err := m.QueryRowCtx(ctx, &resp, shortenerClickStatisticsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clickStatisticsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultClickStatisticsModel) Insert(ctx context.Context, data *ClickStatistics) (sql.Result, error) {
	shortenerClickStatisticsIdKey := fmt.Sprintf("%s%v", cacheShortenerClickStatisticsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, clickStatisticsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Surl, data.ClickTime, data.Ip, data.UserAgent, data.Referer)
	}, shortenerClickStatisticsIdKey)
	return ret, err
}

func (m *defaultClickStatisticsModel) Update(ctx context.Context, data *ClickStatistics) error {
	shortenerClickStatisticsIdKey := fmt.Sprintf("%s%v", cacheShortenerClickStatisticsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, clickStatisticsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Surl, data.ClickTime, data.Ip, data.UserAgent, data.Referer, data.Id)
	}, shortenerClickStatisticsIdKey)
	return err
}

func (m *defaultClickStatisticsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheShortenerClickStatisticsIdPrefix, primary)
}

func (m *defaultClickStatisticsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", clickStatisticsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultClickStatisticsModel) tableName() string {
	return m.table
}
